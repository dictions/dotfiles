# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Open VSCode
code () {
	if [[ $# = 0 ]]
		then
			open -a "Visual Studio Code"
	else
		[[ $1 = /* ]] && F="$1" || F="$PWD/${1#./}"
		open -a "Visual Studio Code" --args "$F"
	fi
}

# Self Signed SSL
function ssl-check() {
	f=~/.localhost_ssl;
	ssl_crt=$f/server.crt
	ssl_key=$f/server.key
	b=$(tput bold)
	c=$(tput sgr0)

	local_ip=$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}'))
	# local_ip=999.999.999 # (uncomment for testing)

	domains=(
		"localhost"
		"$local_ip"
	)

	if [[ ! -f $ssl_crt ]]; then
		echo -e "\nðŸ›‘  ${b}Couldn't find a Slate SSL certificate:${c}"
		make_key=true
	elif [[ ! $(openssl x509 -noout -text -in $ssl_crt | grep $local_ip) ]]; then
		echo -e "\nðŸ›‘  ${b}Your IP Address has changed:${c}"
		make_key=true
	else
		echo -e "\nâœ…  ${b}Your IP address is still the same.${c}"
	fi

	if [[ $make_key == true ]]; then
		echo -e "Generating a new Slate SSL certificate...\n"
		count=$(( ${#domains[@]} - 1))
		mkcert ${domains[@]}

		# Create Slate's default certificate directory, if it doesn't exist
		test ! -d $f && mkdir $f

		# It appears mkcert bases its filenames off the number of domains passed after the first one.
		# This script predicts that filename, so it can copy it to Slate's default location.
		if [[ $count = 0 ]]; then
			mv ./localhost.pem $ssl_crt
			mv ./localhost-key.pem $ssl_key
		else
			mv ./localhost+$count.pem $ssl_crt
			mv ./localhost+$count-key.pem $ssl_key
		fi
	fi
}